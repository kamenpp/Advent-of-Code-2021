# Part I
def getIntersections(input_data): 
    raw_coord = open(input_data).read().split()
    for i in raw_coord:
        if i == "->":
            raw_coord.remove("->")
    raw_x1y1 = []
    raw_x2y2 = []
    for j in range(1, len(raw_coord), 2):
        raw_x2y2.append(raw_coord[j])
        raw_x1y1.append(raw_coord[j-1])
    x1y1 = [xy.split(',') for xy in raw_x1y1]
    x2y2 = [xy.split(',') for xy in raw_x2y2]
    
    if len(x1y1) != len(x2y2):
        raise error # sanity check
    
    points = {}
    for i in range(len(x1y1)):
        if x1y1[i][0] == x2y2[i][0]: # these were the x coord
            for j in range(min(int(x1y1[i][1]), int(x2y2[i][1])), max(int(x1y1[i][1]), int(x2y2[i][1])) + 1): # because the lines can run in positive and nexative direction
                if (int(x1y1[i][0]), j) not in points:
                    points[(int(x1y1[i][0]), j)] = 0
                points[(int(x1y1[i][0]), j)] += 1
            
        elif x1y1[i][1] == x2y2[i][1]: # these were the y coord
            for j in range(min(int(x1y1[i][0]), int(x2y2[i][0])), max(int(x1y1[i][0]), int(x2y2[i][0])) + 1):
                if (j, int(x1y1[i][1])) not in points:
                    points[(j,int(x1y1[i][1]))] = 0
                points[(j,int(x1y1[i][1]))] += 1
                
    ans = 0
    for k in points:
        if points[k] > 1:
            ans += 1
    return ans
